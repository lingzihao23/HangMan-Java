/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import adt.*;
import entity.*;
import client.*;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JFrame;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Random;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import javax.swing.JList;
import javax.swing.ListCellRenderer;

/**
 *
 * @author zichew
 */
public class LeaderBoardUI extends javax.swing.JFrame {

    private SortedArrayListInterface<Rank> overallRankArray = new SortedArrayList<Rank>();
    private SortedArrayListInterface<Rank> easyRankArray = new SortedArrayList<Rank>();
    private SortedArrayListInterface<Rank> mediumRankArray = new SortedArrayList<Rank>();
    private SortedArrayListInterface<Rank> hardRankArray = new SortedArrayList<Rank>();
    private String difficultyLevel;
    private int x;

    /**
     * Creates new form LeaderBoardUI
     */
    public LeaderBoardUI() {
        overallRankArray = new SortedArrayList<>();
        easyRankArray = new SortedArrayList<>();
        mediumRankArray = new SortedArrayList<>();
        hardRankArray = new SortedArrayList<>();
        Rank historyRank[] = new Rank[6];
        historyRank[0] = new Rank("Easy", "Brent", 100, 10);
        historyRank[1] = new Rank("Medium", "Donna", 20, 2);
        historyRank[2] = new Rank("Medium", "Jerry", 10, 1);
        historyRank[3] = new Rank("Easy", "Luke", 50, 5);
        historyRank[4] = new Rank("Medium", "Sue", 60, 6);
        historyRank[5] = new Rank("Hard", "Tom", 70, 7);
        //sort overall
        for (int i = 0; i < historyRank.length; i++) {
            overallRankArray.add(historyRank[i]);
        }
        //categorize into 3 difficulty
        for (int i = 0; i < overallRankArray.getLength(); i++) {
            if (overallRankArray.get(i).getDifficulty().equals("Easy")) {
                easyRankArray.add(overallRankArray.get(i));
            }
        }
        for (int i = 0; i < overallRankArray.getLength(); i++) {
            if (overallRankArray.get(i).getDifficulty().equals("Medium")) {
                mediumRankArray.add(overallRankArray.get(i));
            }
        }
        for (int i = 0; i < overallRankArray.getLength(); i++) {
            if (overallRankArray.get(i).getDifficulty().equals("Hard")) {
                hardRankArray.add(overallRankArray.get(i));
            }
        }
        
        startBoard();

    }

    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        difficultyLable = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        leaderBoardRank = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        leaderBoardStage = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        leaderBoardName = new javax.swing.JList<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        leaderBoardScore = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("CLOSE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        difficultyLable.setFont(new java.awt.Font("Eras Bold ITC", 0, 13)); // NOI18N
        difficultyLable.setText(difficultyLevel);

        jLabel1.setFont(new java.awt.Font("Eras Bold ITC", 0, 13)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("RANK");

        jLabel2.setFont(new java.awt.Font("Eras Bold ITC", 0, 13)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("NAME");

        jLabel3.setFont(new java.awt.Font("Eras Bold ITC", 0, 13)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("SCORE");

        jLabel4.setFont(new java.awt.Font("Eras Bold ITC", 0, 13)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("STAGE");

        leaderBoardRank.setModel(new javax.swing.AbstractListModel<String>() {
            public int getSize() {
                if (difficultyLevel.equals("Easy"))
                return easyRankArray.getLength();
                else if (difficultyLevel.equals("Medium"))
                return mediumRankArray.getLength();
                else if (difficultyLevel.equals("Hard"))
                return hardRankArray.getLength();
                else
                return 0;
            }
            public String getElementAt(int index) {
                if(index==0){
                    if (difficultyLevel.equals("Easy"))
                    easyRankArray.get(index).resetRanking();
                    else if (difficultyLevel.equals("Medium"))
                    mediumRankArray.get(index).resetRanking();
                    else if (difficultyLevel.equals("Hard"))
                    hardRankArray.get(index).resetRanking();
                }
                if (difficultyLevel.equals("Easy")){
                    String ranking=Integer.toString(easyRankArray.get(index).getRanking());
                    return ranking;
                }
                else if (difficultyLevel.equals("Medium")){
                    String ranking=Integer.toString(mediumRankArray.get(index).getRanking());
                    return ranking;
                }
                else if (difficultyLevel.equals("Hard")){
                    String ranking=Integer.toString(hardRankArray.get(index).getRanking());
                    return ranking;
                }
                else{
                    String ranking="Error";
                    return ranking;
                }
            }
        });
        jScrollPane2.setViewportView(leaderBoardRank);

        leaderBoardStage.setModel(new javax.swing.AbstractListModel<String>() {
            public int getSize() {
                if (difficultyLevel.equals("Easy"))
                return easyRankArray.getLength();
                else if (difficultyLevel.equals("Medium"))
                return mediumRankArray.getLength();
                else if (difficultyLevel.equals("Hard"))
                return hardRankArray.getLength();
                else
                return 0;
            }
            public String getElementAt(int index) {
                if (difficultyLevel.equals("Easy")){
                    String stage=Integer.toString(easyRankArray.get(index).getStage());
                    return stage;}
                else if (difficultyLevel.equals("Medium")){
                    String stage=Integer.toString(mediumRankArray.get(index).getStage());
                    return stage;}
                else if (difficultyLevel.equals("Hard")){
                    String stage=Integer.toString(hardRankArray.get(index).getStage());
                    return stage;}
                else
                return "Error";
            }
        });
        jScrollPane3.setViewportView(leaderBoardStage);

        leaderBoardName.setModel(new javax.swing.AbstractListModel<String>() {
            public int getSize() {
                if (difficultyLevel.equals("Easy"))
                return easyRankArray.getLength();
                else if (difficultyLevel.equals("Medium"))
                return mediumRankArray.getLength();
                else if (difficultyLevel.equals("Hard"))
                return hardRankArray.getLength();
                else
                return 0;
            }
            public String getElementAt(int index)
            {
                if (difficultyLevel.equals("Easy"))
                return easyRankArray.get(index).getName();
                else if (difficultyLevel.equals("Medium"))
                return mediumRankArray.get(index).getName();
                else if (difficultyLevel.equals("Hard"))
                return hardRankArray.get(index).getName();
                else
                return "Error";
            }
        });
        jScrollPane5.setViewportView(leaderBoardName);

        leaderBoardScore.setModel(new javax.swing.AbstractListModel<String>() {
            public int getSize() {
                if (difficultyLevel.equals("Easy"))
                return easyRankArray.getLength();
                else if (difficultyLevel.equals("Medium"))
                return mediumRankArray.getLength();
                else if (difficultyLevel.equals("Hard"))
                return hardRankArray.getLength();
                else
                return 0;
            }
            public String getElementAt(int index) {
                if (difficultyLevel.equals("Easy")){
                    String score=Integer.toString(easyRankArray.get(index).getScore());
                    return score;}
                else if (difficultyLevel.equals("Medium")){
                    String score=Integer.toString(mediumRankArray.get(index).getScore());
                    return score;}
                else if (difficultyLevel.equals("Hard")){
                    String score=Integer.toString(hardRankArray.get(index).getScore());
                    return score;}
                else
                return "Error";

            }
        });
        jScrollPane6.setViewportView(leaderBoardScore);

        jLabel5.setFont(new java.awt.Font("Eras Bold ITC", 0, 13)); // NOI18N
        jLabel5.setText("DIFFICULTY :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(difficultyLable, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(difficultyLable, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(jScrollPane6)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(35, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        dispose();
        difficultyLable.setText("");
        runLeaderBoard();
        

    }//GEN-LAST:event_jButton1ActionPerformed

    private void startBoard() {
        
        leaderBoardDifficultyMenu();
        if (difficultyLevel.equals("Easy")) {
            setTitle("The Leaderboard of Easy Ranking");
        } else if (difficultyLevel.equals("Medium")) {
            setTitle("The Leaderboard of Medium Ranking");
        } else if (difficultyLevel.equals("Hard")) {
            setTitle("The Leaderboard of Hard Ranking");
        }
        
        initComponents();

        setVisible(true);
    }

    private void leaderBoardDifficultyMenu() {
        String[] difficultyOptions = {"Easy", "Medium", "Hard", "Back"};

        x = JOptionPane.showOptionDialog(null, "Please select a difficulty:", "Ranking acroding difficulty", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, difficultyOptions, difficultyOptions[0]);

        switch (x) {
            case 0:

                difficultyLevel = difficultyOptions[x];

                break;

            case 1:

                difficultyLevel = difficultyOptions[x];

                break;

            case 2:

                difficultyLevel = difficultyOptions[x];

                break;

            case 3:
                int quitselect = JOptionPane.showConfirmDialog(null, "Do you want to quit the game?", "Exit Game", JOptionPane.YES_NO_OPTION);
                if (quitselect == JOptionPane.YES_OPTION) {
                    System.exit(0);
                } else {
                    dispose();
                    difficultyLable.setText("");
                    startBoard();
                }

            default:
                break;
        }
    }


    /**
     */
    public static void runLeaderBoard() {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LeaderBoardUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LeaderBoardUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LeaderBoardUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LeaderBoardUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LeaderBoardUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel difficultyLable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JList<String> leaderBoardName;
    private javax.swing.JList<String> leaderBoardRank;
    private javax.swing.JList<String> leaderBoardScore;
    private javax.swing.JList<String> leaderBoardStage;
    // End of variables declaration//GEN-END:variables
}
