package client;

import adt.*;
import entity.*;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JFrame;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.JList;

/**
 *
 * @author lzhao
 */
public class HangManUI extends javax.swing.JFrame {

    private RandomInterface<Question> questionList = new RandomLinkedList<Question>();
    private ArrayQueueInterface<Stage> stageQueue = new ArrayQueue<Stage>();
    private MapInterface<Character, int[]> correctAnswer;
    private ArrListGameResultsInterface<GameResult> resultList = new ArrListGameResults<GameResult>();
    private String[] endgameOptions = {"Play Again", "Exit"};
    private String[] viewgameOptions = {"View ", "Exit"};
    private Question currentQuestion;
    private int level = 1, stageScore, x, totalScore, wAttempts, correctTimes, winCorrectTimes, gameNo = 1;
    private String difficultyLevel, gameDifficulty;

    private Hint hint;

    private GameResult game;
    private Letter letter = new Letter();
    private Random random = new Random();
    private final static int MAXWRONGATTEMPTS = 6;
    private final static int MAX_LEVEL = 10;
    JButton keyBoardbuttons[] = new JButton[26];
    JLabel questionLabel[];

    private Integer selectedUser;
    //private JList list;   
    private ListInterface<User> userList = new ArrayList<User>();

    /**
     * Creates new form HangMan
     */
    public HangManUI() {
        gameBegin();
    }

    public HangManUI(Integer selectedUser, ListInterface<User> userList) {
        this.selectedUser = selectedUser;
        this.userList=userList;
        resultList=userList.get(selectedUser).getGameResult();
        
        gameBegin();
    }
   private void switchPage(){
    this.userList.get(selectedUser).setGameResult(resultList);
    new Home(selectedUser, userList);
    dispose();
   }

    public void gameBegin() {
        setTitle("Hangman, The Game");
        start();
        initComponents();
        gameProcess();

        pressXtoClose();
    }

    public void readQuestion(String difficulty) {
        File filename = new File("QuestionData\\" + difficulty + ".txt");

        try {
            BufferedReader input = new BufferedReader(new FileReader(filename.getAbsolutePath()));
            String text;
            while ((text = input.readLine()) != null) {
                String textarr[] = text.split("\\|");
                questionList.add(new Question(textarr[0], textarr[1], difficulty));
            }
            input.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error! Unable to load questions");
            System.exit(0);
        }

        for (int i = 0; i < MAX_LEVEL; i++) {
            Stage temp = new Stage(difficultyLevel, level, questionList.getRandom());
            stageQueue.enqueue(temp);

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        difficultyBox = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        stageNoBox = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        attemptsBox = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        scoreBox = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        questionPanel = new javax.swing.JPanel();
        hintDescription = new javax.swing.JLabel();
        hintButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        hangManIcon = new javax.swing.JLabel();
        keyboardFrame = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(800, 600));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Diffculty:");

        difficultyBox.setText("");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Stage:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Wrong Attempts:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Current Score:");

        scoreBox.setText(null);

        javax.swing.GroupLayout questionPanelLayout = new javax.swing.GroupLayout(questionPanel);
        questionPanel.setLayout(questionPanelLayout);
        questionPanelLayout.setHorizontalGroup(
            questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        questionPanelLayout.setVerticalGroup(
            questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 70, Short.MAX_VALUE)
        );

        hintDescription.setText("Description: ");

        hintButton.setText("Hints");
        hintButton.setRequestFocusEnabled(false);
        hintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hintButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(193, Short.MAX_VALUE)
                .addComponent(hintButton)
                .addGap(50, 50, 50))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(questionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(hintDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(200, 200, 200)
                .addComponent(questionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(hintDescription)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addComponent(hintButton))
        );

        hangManIcon.setRequestFocusEnabled(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hangManIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hangManIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        keyboardFrame.setRequestFocusEnabled(false);

        javax.swing.GroupLayout keyboardFrameLayout = new javax.swing.GroupLayout(keyboardFrame);
        keyboardFrame.setLayout(keyboardFrameLayout);
        keyboardFrameLayout.setHorizontalGroup(
            keyboardFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
        );
        keyboardFrameLayout.setVerticalGroup(
            keyboardFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 79, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(keyboardFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(keyboardFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(5, 5, 5)
                        .addComponent(difficultyBox, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(stageNoBox, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(5, 5, 5)
                        .addComponent(attemptsBox, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(5, 5, 5)
                        .addComponent(scoreBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(difficultyBox)
                    .addComponent(jLabel2)
                    .addComponent(stageNoBox)
                    .addComponent(jLabel3)
                    .addComponent(attemptsBox)
                    .addComponent(jLabel5)
                    .addComponent(scoreBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void hintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hintButtonActionPerformed
        if (hint.getHintUsed() != hint.getMaxUse()) {

            if (hint.getHintUsed() == 0) {
                hintDescription.setText("Description: " + stageQueue.get(0).getCurrentQuestion().getDescription());
                hint.setHintUsed(1);
            } else {
                char alphabet = currentQuestion.generateHint();

                while (!correctAnswer.contains(alphabet)) {
                    alphabet = currentQuestion.generateHint();
                }
                hint.addHintLetter(alphabet);
                for (int i = 0; i < keyBoardbuttons.length; i++) {
                    if ((keyBoardbuttons[i].getText().charAt(0)) == alphabet) {
                        keyBoardbuttons[i].doClick();
                        break;
                    }
                }
                totalScore -= hint.getPointsDeductEach();
            }
        }
    }//GEN-LAST:event_hintButtonActionPerformed

    private void start() {
        difficultyMenu();
        readQuestion(difficultyLevel);
        setVisible(true);
    }

    private void gameProcess() {

        codeComponents();
        initializeVar();
        displayQuestions();
        updateDisplay();
    }

    private void difficultyMenu() {
        String[] difficultyOptions = {"Easy", "Medium", "Hard", "Quit"};
        String filename = "difficultyIcon.png";
        ImageIcon icon1 = new ImageIcon("images//" + filename);
        x = JOptionPane.showOptionDialog(null, "Please select a difficulty:", " Welcome to Hangman", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, icon1, difficultyOptions, difficultyOptions[0]);

        switch (x) {
            case 0:
            case 1:
            case 2:

                difficultyLevel = difficultyOptions[x];
                gameDifficulty = difficultyLevel;
                break;

            case 3:
                int quitselect = JOptionPane.showConfirmDialog(null, "Do you want to quit the game?", "Exit Game", JOptionPane.YES_NO_OPTION);
                if (quitselect == JOptionPane.YES_OPTION) {
                    switchPage();
                } else {
                    start();
                }
                break;

            case JOptionPane.CLOSED_OPTION:
                System.exit(0);
                break;
            default:
                break;
        }
    }

    private void codeComponents() {

        letter.alphabet = 'A';

        for (int i = 0; i < 26; i++) {
            keyBoardbuttons[i] = new JButton(letter.alphabet + "");
            keyBoardbuttons[i].setRequestFocusEnabled(false);
            keyBoardbuttons[i].addActionListener(new LetterButtonReaction());
            letter.alphabet++;
        }

        keyboardFrame.setLayout(new GridLayout(2, 13));

        for (int i = 0; i < keyBoardbuttons.length; i++) {
            int randPos = random.nextInt(keyBoardbuttons.length);
            JButton temp = keyBoardbuttons[i];
            keyBoardbuttons[i] = keyBoardbuttons[randPos];
            keyBoardbuttons[randPos] = temp;
            keyboardFrame.add((keyBoardbuttons[i]));
            keyboardFrame.add((keyBoardbuttons[randPos]));
        }

    }

    /**
     * @param args the command line arguments
     */
    private void initializeVar() {
        int use;
        if (x == 2) {
            use = 4;
        } else {
            use = 3;
        }

        hangManIcon.setIcon(new ImageIcon("images//Hangman0.png"));

        currentQuestion = stageQueue.get(0).getCurrentQuestion();
        correctAnswer = currentQuestion.getLetterFrequency();
        questionPanel.setLayout(new FlowLayout());
        questionLabel = new JLabel[currentQuestion.getWord().length()];
        hint = new Hint(use, (int) Math.round(currentQuestion.getPoints() * 0.1));
        winCorrectTimes = correctAnswer.getSize();
    }

    private void updateDisplay() {
        difficultyBox.setText(stageQueue.get(0).getDifficulty());
        stageNoBox.setText(level + "");
        attemptsBox.setText(stageQueue.get(0).getwAttempts() + "");
        scoreBox.setText(totalScore + "");
        String filename = "Hangman" + stageQueue.get(0).getCurrentState() + ".png";
        hangManIcon.setIcon(new ImageIcon("images//" + filename));
    }

    private void displayQuestions() {

        for (int i = 0; i < questionLabel.length; i++) {
            questionLabel[i] = new JLabel("_");
            questionPanel.add(questionLabel[i]);
        }

    }

    private void calculatePoints() {

        stageScore = stageQueue.get(0).getCurrentQuestion().getPoints();
        stageQueue.get(0).setStageScore(totalScore);

    }

    private void changeState() {
        wAttempts++;
        stageQueue.get(0).setwAttempts(wAttempts);
        stageQueue.get(0).setCurrentState(wAttempts);
    }

    private class LetterButtonReaction implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() instanceof JButton) {
                JButton tempButton = (JButton) e.getSource();
                tempButton.setEnabled(false);
                revealLetter(tempButton.getText().charAt(0));

                if (checkWinningCondition()) {
                    if (level == MAX_LEVEL) {
                        calculatePoints();
                        gameWin();
                    } else {
                        calculatePoints();
                        nextStage();
                    }

                } else if (checkLosingCondition()) {
                    gameLose();
                }
            }

        }

    }

    private void revealLetter(char letter) {
        int letterPosition[] = correctAnswer.getValue(letter);
        if (letterPosition == null) {
            changeState();
            updateDisplay();
        } else {
            for (int i = 0; i < letterPosition.length; i++) {
                questionLabel[letterPosition[i]].setText((letter + ""));
            }
            correctTimes++;
            correctAnswer.remove(letter);
        }
    }

    private void pressXtoClose() {
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent we) {
                int quitselect = JOptionPane.showConfirmDialog(null, "Do you want to quit the game?", "Exit Game", JOptionPane.YES_NO_OPTION);
                if (quitselect == JOptionPane.YES_OPTION) {
                    dispose();
                }
                    switchPage();
            }
        });
    }

    public boolean checkWinningCondition() {

        if (correctTimes == winCorrectTimes) {
            stageQueue.get(0).setIsCompleted(true);
        }

        return correctTimes == winCorrectTimes;

    }

    public boolean checkLosingCondition() {

        return wAttempts == MAXWRONGATTEMPTS;

    }

    public void resetAll() {
        //save result();
        wAttempts = 0;
        stageQueue.dequeue();
        questionLabel = null;
        correctAnswer = null;
        hintDescription.setText("Description: ");
        keyboardFrame.removeAll();
        questionPanel.removeAll();
        questionPanel.repaint();
        correctTimes = 0;
    }

    public void nextStage() {
        resetAll();
        level++;
        totalScore += stageScore;
        gameProcess();
    }

    public void endGame() {
        String filename = "gameoverIcon.png";
        ImageIcon icon2 = new ImageIcon("images//" + filename);
        int endgameOption = JOptionPane.showOptionDialog(null, "Good Game! You have gotten " + totalScore + " points! Would you like to play again or quit?", "Game Over", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, icon2, endgameOptions, endgameOptions[0]);
        switch (endgameOption) {
            case 0:
                gameResult();
                resetAll();
                newGame();
                break;
            case 1:
                gameResult();
                switchPage();
                break;
            case JOptionPane.CLOSED_OPTION:
                gameResult();
                switchPage();
                break;
            default:
                break;
        }
    }

    public void newGame() {
        new HangManUI(selectedUser,userList).setVisible(true);
        dispose();
    }

    public void gameLose() {
        String filename = "HangmanLose.png";
        hangManIcon.setIcon(new ImageIcon("images//" + filename));
        game = new GameResult(difficultyLevel, false, MAX_LEVEL - stageQueue.getLength(), totalScore);

        endGame();
    }

    public void gameWin() {

        String filename = "HangmanWin.png";
        hangManIcon.setIcon(new ImageIcon("images//" + filename));
        totalScore += stageScore;
        stageQueue.get(0).setStageScore(totalScore);
        scoreBox.setText(totalScore + "");

        game = new GameResult(difficultyLevel, true, MAX_LEVEL, totalScore);
        gameNo++;

        JOptionPane.showMessageDialog(null, "Congratulations! You Have Completed All Stages of The Game!");
        endGame();
    }

    public void gameResult() {

        String filename = "gameResult.png";
        resultList.add(game);
        userList.get(selectedUser).setGameResult(resultList);
          
        String message;
        if (game.isWin()) {
            message = "Win";
        } else {
            message = "Lose";
        }

        ImageIcon icon3 = new ImageIcon("images//" + filename);
        int viewgameOption = JOptionPane.showOptionDialog(null, "Do you want to view the game result? ", "Game Result", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, icon3, viewgameOptions, viewgameOptions[0]);

        switch (viewgameOption) {
            case 0:
                JOptionPane.showMessageDialog(null, "Game : " + gameNo + " \nDiffculty: " + gameDifficulty + " \nStatus: " + message + "\nRounds completed:" + game.getRoundCompleted() + " \nFinal score: " + totalScore, "\nResult Message", JOptionPane.INFORMATION_MESSAGE);
                break;
            case 1:
                dispose();
                break;
            case JOptionPane.CLOSED_OPTION:
                dispose();
                break;
            default:
                break;
        }

    }

    public static void HangManUI() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HangManUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HangManUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HangManUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HangManUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HangManUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel attemptsBox;
    private javax.swing.JLabel difficultyBox;
    private javax.swing.JLabel hangManIcon;
    private javax.swing.JButton hintButton;
    private javax.swing.JLabel hintDescription;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel keyboardFrame;
    private javax.swing.JPanel questionPanel;
    private javax.swing.JLabel scoreBox;
    private javax.swing.JLabel stageNoBox;
    // End of variables declaration//GEN-END:variables
}
